plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
//    id 'dagger.hilt.android.plugin'
}

android {
    namespace='com.au.module_android'
    compileSdk=gradle.ext.compileSdk

    def supportLocales = Boolean.parseBoolean(findProperty("app.supportLocales"))
    def supportDarkMode = Boolean.parseBoolean(findProperty("app.supportDarkMode"))

    defaultConfig {
        minSdk=gradle.ext.minSdk
        targetSdk=gradle.ext.targetSdk

        consumerProguardFiles "consumer-rules.pro"
        buildConfigField("boolean", "SUPPORT_LOCALES", "" + supportLocales)
        buildConfigField("boolean", "SUPPORT_DARKMODE", "" + supportDarkMode)
    }

    buildTypes {
        release {
            //是否混淆
            minifyEnabled=false
            //压缩资源，必须开启minifyEnabled才有用
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.typhurRelease
            // 设置是否要自动上传
            // firebaseCrashlytics {
            //     mappingFileUploadEnabled false
            // }
            // 上传bundle包所需的原生调试符号
//            ndk {
//                debugSymbolLevel = 'FULL'//或者 'SYMBOL_TABLE'
//            }

            buildConfigField("boolean", "ENABLE_LOGCAT", "false")
            buildConfigField("boolean", "ENABLE_FILE_LOG_DEFAULT", "false")
        }
        debug {
            //是否混淆
            minifyEnabled=false
            //压缩资源，必须开启minifyEnabled才有用
            shrinkResources=false

            buildConfigField("boolean", "ENABLE_LOGCAT", "true")
            buildConfigField("boolean", "ENABLE_FILE_LOG_DEFAULT", "true")
        }
    }

    compileOptions {
        sourceCompatibility=gradle.ext.sourceCompatibility
        targetCompatibility=gradle.ext.targetCompatibility
    }
    kotlinOptions {
        jvmTarget = gradle.ext.jvmTarget
        freeCompilerArgs = ["-Xstring-concat=inline"]
    }
    buildFeatures {
        viewBinding=true
        buildConfig=true
    }
}

dependencies {
    implementation project(":Module-AndroidColor")

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.window

    // ViewModel
    api libs.androidx.lifecycle.viewmodel.ktx
    // LiveData
    api libs.androidx.lifecycle.livedata.ktx
    // Lifecycles only (without ViewModel or LiveData)
    api libs.androidx.lifecycle.runtime.ktx
    // Saved state module for ViewModel
    api libs.androidx.lifecycle.viewmodel.savedstate

    api libs.material
    api libs.androidx.startup.runtime

    api libs.gson

    api libs.androidx.recyclerview

    // define a BOM and its version
    api platform(libs.okhttp.bom)
    // define any required OkHttp artifacts without version
    api libs.okhttp

    api libs.glide
    implementation libs.androidx.lifecycle.process
    ksp libs.glideKsp
    api libs.okhttp3.integration

    //implementation libs.mmkv.static
    //implementation files('libs/mmkv.aar')

    api libs.androidx.datastore.preferences

    implementation libs.androidx.core.splashscreen
    //implementation libs.android.cn.oaid

    //hilt
//    implementation(libs.hilt.android)
//    ksp(libs.hilt.android.compiler)
}