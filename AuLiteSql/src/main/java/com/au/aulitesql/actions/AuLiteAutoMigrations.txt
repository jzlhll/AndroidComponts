package com.au.aulitesql;

import static com.au.aulitesql.actions.SqlUtils.SqlString.sqlDeleteTable;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import androidx.annotation.NonNull;

import com.au.aulitesql.info.CreatorAssetInfo;
import com.au.aulitesql.info.CreatorInfo;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

public class AuLiteAutoMigrations {
    List<IManualMigration<? extends EntityTable>> tableInnersMigrations = null;
    Map<Pair<String, Class<? extends EntityTable>>, IManualMigration<? extends EntityTable>> tablesMigrations = null;

    void onVersionChange(@NonNull CreatorInfo creators, @NonNull SQLiteDatabase db) {
        List<String> oldTabs = SqlUtils.allTableNames(db);
        List<String> newTabs = creators.allTableNames();

        //1. 一张表都不需要了。全部删掉。
        if (newTabs.size() == 0) {
            for (String oldTab : oldTabs) {
                db.execSQL(sqlDeleteTable(oldTab));
            }
            return;
        }

        //2. 对比
        Triple<List<String>, List<String>, List<String>>
                triple = Triple.compare(newTabs, oldTabs, String::equals);

        //3. 新独立表，先进行创建
        for (String newTab : triple.p2) {
            db.execSQL(Objects.requireNonNull(creators.getByTableName(newTab)).sql);
        }

        //4. 删除老表。如果有迁移函数，则允许迁移到新表。later：暂不支持复杂的比如某个表就是要往老表的迁移，而2个老表又同名。
        for (String oldTab : triple.p3) {
            boolean needDeleteOldTab = true;
            db.beginTransaction();

            if (tablesMigrations != null && tablesMigrations.size() > 0) {
                Set<Pair<String, Class<? extends EntityTable>>> sets = tablesMigrations.keySet();
                //遍历迁移函数
                for (Pair<String, Class<? extends EntityTable>> migOldTabToNewTabKey : sets) {
                    String migOldTab = migOldTabToNewTabKey.p1;
                    Class<? extends EntityTable> migNewClass = migOldTabToNewTabKey.p2;
                    //找到了同名的迁移
                    if (migOldTab.equals(oldTab)) {
                        //取出新的类对应的sql
                        TableAssetInfo newTableInfo = creators.getByTableClass(migNewClass);
                        if (newTableInfo != null) {
                            IManualMigration mm = tablesMigrations.get(migOldTabToNewTabKey);
                            Cursor cursor = db.query(oldTab, null, null, null, null, null, null);
                            Pair<ContentValues, Boolean> newTabDatas = mm.onTableInnerMigrate(migNewClass, cursor);
                            db.insert(newTableInfo.name, null, newTabDatas.p1);
                            if (newTabDatas.p2) { //允许保留老的表
                                needDeleteOldTab = false;
                            }
                        }

                        break; //跳出
                    }
                }
            }

            if(needDeleteOldTab) db.execSQL(sqlDeleteTable(oldTab));

            db.setTransactionSuccessful();
            db.endTransaction();
        }

        //5. 同名表，则先进行table校验。是否需要进行迁移。然后，进行表内迁移。
        //默认实现则，字段不对的，直接不保留。
        for (String tab : triple.p1) {

        }
    }
}
